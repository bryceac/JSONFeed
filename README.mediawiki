=JSONFeed=

'''Author:''' Bryce Campbell

'''Description:''' A Swift library to help parse and create JSON feeds, based upon the spec, as specified the [https://jsonfeed.org/version/1 JSONFeed website].

'''License:''' See LICENSE

'''Version:''' 0.2

==Notes==

This library utilizes Codable to encode and decode feeds, so it >strong>should</strong> work with Swift version 4, but it is not guaranteed, as this code has only been tested with Swift version 5.

Right now, the models are basic enough that there should not be any troubles compiling in version of Swift earlier than 5.

===Version History===

<dl>
<dt style="font-weight: bold">0.1</dt>
<dd>Initial release.</dd>
<dt style="font-weight: bold">0.2</dt>
<dd><p>Released 8/31/2019.</p> 
<p>Make load(from: Data) private and creature function with completion handler.</p>
<p>Also made library compatible with iOS, watchOS, and tvOS, by fixing save mechanism.</p>
</dd>
</dl>

===Creating Feeds===

feeds can be created by putting the various parts together.

can can be established like this (things are formatted for easy reading):

<pre>
let author: JSONFeedAuthor? = JSONFeedAuthor(withName: "William Minerva")
let articles: [JSONFeedItem] = [
        JSONFeedItem(withID: "1", 
        url: URL(string: "http://example.com/hello")!, 
        title: "Hello, World!", htmlContent: "<p>Hello, World!</p>", 
        datePublished: Date(), 
        author: author, 
        attachments: [
                JSONFeedAttachment(withURL: URL(string: "http://example.com/hello.mp3")!, mimeType: "audio/mpeg", title: "Hello, World!", sizeInBytes: 3145728, durationInSeconds: 60)
            ])
    ]
let feed = JSONFeed(title: "Test Feed", homePage: URL(string: "http://example.com"), url: URL(string: "http://example.com/feed"), author: author!, items: articles)
</pre>

The following creates an optional feed that is set to JSON Feed Version 1.

As of August of 2019, version 1 is the latest version and the only one allowed, but it can be expanded later, if the need arises.

===Installation===

This Library only supports two methods of inclusion, one of which has not been tested.

those are via:

<ul>
<li><abbr title="Swift Package Manager">SPM</abbr></li>
<li>Manual</li>
</ul>

Manual has not been tested, but <strong>should</strong> be as simple as generating an XCode project inside the folder containing the library like this:

<pre>
swift package generate-xcodeproj
</pre>

And then importing the xcode project into the intended XCode project.

For Swift Package Manager, just add the following to '''Package.swift''', under '''dependencies''':

<pre>
.package(url: "https://github.com/bryceac/JSONFeed.git", .branch("master"))
</pre>

And adding it to the dependency list, in the same file, for the target like this:

<pre>
dependencies: ["JSONFeed"])
</pre>

===Parsing Feeds===

There are two ways feeds can be loaded/parsed, and <strong>should</strong> be approached using those ways.

They are:

<ul>
<li>load(from: URL)</li>
<li>load(from:completion:)</li>
</ul>

The first would be used to retrieve local files, like this:

<pre>
let DOCUMENTS_DIRECTORY = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
let ARCHIVE_URL = DOCUMENTS_DIRECTORY.appendingPathComponent("feed").appendingPathExtension("json")

let FEED = JSONFeed(from: ARCHIVE_URL)
</pre>

This loads a local file named '''feed.json''' into an optional JSONFeed model.

The second is used to retrieve remote files and would look like this:

<pre>
let FEED_URL = URL(string: "http://therecord.co/feed.json")!

JSONFeed.load(from: FEED_URL) { (feed) in
    guard let feed = feed else { return }

    print(feed)
}
</pre>

The above grabs the specified feed asynchronously and feeds it to a closure that will present the feed details.

It works like a normal data task in Swift, but will not return the response or errors at this time.

====Reading====

It is best to implement output in a way that is appropriate for application, after using one of the above methods, but for debugging purposes, I have made each of the five models used conform to CustomStringConvertible, so that details can be displayed simply by doing this:

<pre>
print(FEED)
</pre>

''FEED'' is to be replaced with the variable or constant that contains your feed.

===Contributing===

Anyone is free to help make this library better, as I will likely only update this when needed and I am still a little new to Swift, by creating a fork of this library.

However, it may take a while for me to approve or reject changes to this library. If you cannot accept that, you are better off maintaining your own fork or contributing to the many other libraries out there with the same name.

The only thing I ask, aside from things required by the MIT License, is that things remain simple and commented well (Hopefully better than mine).

==Support==

Although I am familiar with Swift, from having gone through both of Apple's books, I am still a little new to the language, so I can only provided limited support.

Anything having to do with how Codable itself and other Foundational stuff works is beyond my current abilities, which means you will be on your own in such events.

This library has been tested with Swift version 5.0.2 on Ubuntu 18.04 and is only guaranteed to work on Swift 5, though it <strong>should</strong> be backwards compatible with version 4, due to how little things have changed in requirements to conform to Codable.

